 #version 330
layout (triangles_adjacency) in;
layout (line_strip, max_vertices = 4) out;
in vec3 Position0[];
in vec3 PositionWorld[];
void EmitLine(int StartIndex, int EndIndex)
{
  //Draw line
    gl_Position = gl_in[StartIndex].gl_Position;
    EmitVertex();
    gl_Position = gl_in[EndIndex].gl_Position;
    EmitVertex();

}
void EmitLine2(int StartIndex,int MiddelIndex, int EndIndex)
{
  //Draw line
    gl_Position = gl_in[StartIndex].gl_Position;
    EmitVertex();
    gl_Position = gl_in[MiddelIndex].gl_Position;
    EmitVertex();
    gl_Position = gl_in[EndIndex].gl_Position;
    EmitVertex();

}
void EmitLine3(int StartIndex,int MiddelIndex, int EndIndex)
{
  //Draw line
    gl_Position = gl_in[StartIndex].gl_Position;
    EmitVertex();
    gl_Position = gl_in[MiddelIndex].gl_Position;
    EmitVertex();
    gl_Position = gl_in[EndIndex].gl_Position;
    EmitVertex();
    gl_Position = gl_in[StartIndex].gl_Position;
    EmitVertex();

}
void main()
{

  //临接三角形顶点分布图
  //   1-----------2----------3
  //
  //          0---------4
  //
  //                5
    vec3 e1 = Position0[2] - Position0[0];
    vec3 e2 = Position0[4] - Position0[0];
    vec3 e3 = Position0[1] - Position0[0];
    vec3 e4 = Position0[3] - Position0[2];
    vec3 e5 = Position0[4] - Position0[2];
    vec3 e6 = Position0[5] - Position0[0];
    vec3 Normal0 = normalize(cross(e2,e1)); //024三角形法向量
    vec3 Normal1 = normalize(cross(e1,e3)); //012
    vec3 Normal3 = normalize(cross(e5,e4));//234
    vec3 Normal5 = normalize(cross(e6,e2)); //045


    int is02Drawed = 0;
    int is24Drawed = 0;
    int is40Drawed = 0;


    vec3 world_e1 = PositionWorld[2] - PositionWorld[0];
    vec3 world_e2 = PositionWorld[4] - PositionWorld[0];
    vec3 world_e3 = PositionWorld[1] - PositionWorld[0];
    vec3 world_e4 = PositionWorld[3] - PositionWorld[2];
    vec3 world_e5 = PositionWorld[4] - PositionWorld[2];
    vec3 world_e6 = PositionWorld[5] - PositionWorld[0];

    vec3 NormalWorld = cross(world_e2,world_e1);
    vec3 View = -PositionWorld[0];//近似作为代表面的点
    if (dot(NormalWorld, View) > 0) { //如果在可以看到（即在正面）

      NormalWorld = cross(world_e1,world_e3);
      if (dot(NormalWorld, View) <= 0) { //012在反面
          is02Drawed = 1 ; //02即是边界
      }

      View =  -PositionWorld[2];
      NormalWorld = cross(world_e5,world_e4);
      if (dot(NormalWorld, View) <=0) { //234在反面
          is24Drawed = 1;
      }

      NormalWorld = cross(world_e6,world_e2);
      View = -PositionWorld[4];
      if (dot(NormalWorld, View) <= 0) {
         is40Drawed = 1;
      }

    }

      if(dot(Normal0,Normal1) < 0.3){
        is02Drawed = 1;
      }
      if(dot(Normal0,Normal3) < 0.3){
        is24Drawed = 1;
      }
      if(dot(Normal0,Normal5) < 0.3){
        is40Drawed = 1;
      }




    int total = is02Drawed + is24Drawed + is40Drawed;
    switch (total) {
      case 0: break;
      case 1: {
          if(is02Drawed == 1){
            EmitLine(0,2);
          }
          else if(is24Drawed == 1){
           EmitLine(2,4);
          }
          else{
            EmitLine(0,4);
          }
          break;
        }
      case 2: {
          if(is02Drawed ==0){
            EmitLine2(0,4,2);
          }
          else if(is24Drawed == 0){
            EmitLine2(2,0,4);
          }
          else{
           EmitLine2(0,2,4);
          }
          break;
      }
      case 3: EmitLine3(0,2,4); break;
    }
    EndPrimitive();
}
